# Generated by Django 5.2.3 on 2025-06-27 17:01

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ElectionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('election_title', models.CharField(default='Class Election 2025', help_text='Title of the election', max_length=200)),
                ('election_description', models.TextField(blank=True, help_text='Description of the election')),
                ('is_election_active', models.BooleanField(default=True, help_text='Whether the election system is active')),
                ('show_live_results', models.BooleanField(default=True, help_text='Whether to show live results during voting')),
                ('results_refresh_interval', models.PositiveIntegerField(default=30, help_text='Auto-refresh interval for live results (in seconds)')),
                ('technical_head_email', models.EmailField(blank=True, help_text='Email of the technical head who can access audit trails', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Election Settings',
                'verbose_name_plural': 'Election Settings',
                'db_table': 'voting_election_settings',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the position (e.g., President, Secretary)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the position and responsibilities')),
                ('start_time', models.DateTimeField(help_text='When voting opens for this position')),
                ('end_time', models.DateTimeField(help_text='When voting closes for this position')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this position is active in the election')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'db_table': 'voting_position',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the voter', max_length=100)),
                ('reg_no', models.CharField(help_text='Registration number (student ID)', max_length=20, unique=True)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique authentication token for voting', unique=True)),
                ('has_voted', models.BooleanField(default=False, help_text='Whether this voter has already cast their vote')),
                ('voted_at', models.DateTimeField(blank=True, help_text='Timestamp when the voter cast their vote', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Voter',
                'verbose_name_plural': 'Voters',
                'db_table': 'voting_voter',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the candidate', max_length=100)),
                ('reg_no', models.CharField(help_text='Registration number of the candidate', max_length=20)),
                ('bio', models.TextField(blank=True, help_text='Brief biography or manifesto of the candidate')),
                ('photo', models.ImageField(blank=True, help_text='Profile photo of the candidate', null=True, upload_to='candidate_photos/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this candidate is active in the election')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('positions', models.ManyToManyField(help_text='Positions this candidate is contesting for', related_name='candidates', to='voting.position')),
            ],
            options={
                'verbose_name': 'Candidate',
                'verbose_name_plural': 'Candidates',
                'db_table': 'voting_candidate',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voted_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this vote was cast')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the vote was cast', null=True)),
                ('candidate', models.ForeignKey(help_text='The candidate this vote is for', on_delete=django.db.models.deletion.CASCADE, to='voting.candidate')),
                ('position', models.ForeignKey(help_text='The position this vote is for', on_delete=django.db.models.deletion.CASCADE, to='voting.position')),
                ('voter', models.ForeignKey(help_text='The voter who cast this vote', on_delete=django.db.models.deletion.CASCADE, to='voting.voter')),
            ],
            options={
                'verbose_name': 'Vote',
                'verbose_name_plural': 'Votes',
                'db_table': 'voting_vote',
                'ordering': ['-voted_at'],
                'unique_together': {('voter', 'position')},
            },
        ),
    ]
